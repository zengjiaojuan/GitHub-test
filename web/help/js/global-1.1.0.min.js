/*!
 * Global 
 * @author WangPing
 * @since 2014/04/18 09:50
 */
var Util = Util || {};
Util.config = {
	jsPath : "/html/webapp/local/js/",
	cssPath : "/html/webapp/local/css/",
	imgPath : "/html/webapp/local/img/",
	tmpPath : "/html/webapp/www/",
	staticPath: '/html/webapp/www/static/'
};
Util.isMobile = {
	Android: function() {
		return navigator.userAgent.match(/Android/i) ? true : false;
	},
	BlackBerry: function() {
		return navigator.userAgent.match(/BlackBerry/i) ? true : false;
	},
	iOS: function() {
		return navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;
	},
	Windows: function() {
		return navigator.userAgent.match(/IEMobile/i) ? true : false;
	},
	any: function() {
		return (Util.isMobile.Android() || Util.isMobile.BlackBerry() || Util.isMobile.iOS() || Util.isMobile.Windows());
	}
};

Util.pageSize = function() {
	var a = document.documentElement;
	var b = ["clientWidth", "clientHeight", "scrollWidth", "scrollHeight"];
	var c = {};
	for (var d in b) c[b[d]] = a[b[d]];
	c.scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft;
	c.scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
	return c
};

Util.LoadingShow = function(inparams) {
	var params = {
		alpha: 0.35,
		bgColor: '#000',
		mZindex: 9997
	};
	if (inparams && typeof(inparams) == 'object') {
		for (var key in inparams) {
			if (key.match(/^_/)) {
				continue
			}
			params[key] = inparams[key]
		}
	};
	var _width = Util.pageSize()['scrollWidth'];
	var _height = Util.pageSize()['scrollHeight'];
	$(window).size(function() {
		_width = Util.pageSize()['scrollWidth'];
		_height = Util.pageSize()['scrollHeight']
	});
	var html = '<div id="loadingLayer" style="position:absolute;left:0;top:0;right:0;bottom:0;z-index:' + params.mZindex + ';width:' + _width + 'px;height:' + _height + 'px;background:' + params.bgColor + ';opacity:'+params.alpha+'"></div>';
	html += '<div id="loadingGif" style="position:absolute;left:50%;top:50%;margin-left:-16px;margin-top:-16px;"><img src="/resrc/img/loading.gif"></div>'
	$(html).appendTo('body').fadeIn(200);
};

Util.LoadingHide = function(){
	$('#loadingLayer').remove();
	$('#loadingGif').remove();
};
Util.getDateStr = function (c, d) {
	d.setDate(d.getDate() + c);
	return (d.getMonth() + 1) + '/' + (d.getDate()) + '/' + d.getFullYear()
};
Util.loadJS = function (url, callback, ecall) {
	var head = document.head || document.getElementsByTagName("head")[0] || document.documentElement,
		script, options, o, scriptsArray = [];
	if (typeof url === "object") {
		options = url;
		url = undefined
	}
	o = options || {};
	url = url || o.url;
	var path = url.split(",");
	callback = callback || o.success;
	for (var i = 0; i < path.length; i++) {
		str = path[i].slice(path[i].lastIndexOf('/') + 1);
		name = str.substring(0, str.indexOf("."));
		script = document.createElement("script");
		script.async = o.async || false;
		script.type = "text/javascript";
		if (o.charset) script.charset = o.charset;
		if (o.cache === false) {
			path[i] = path[i] + (/\?/.test(path[i]) ? "&" : "?") + "time=" + (new Date()).getTime()
		}
		script.src = (path[i].indexOf("/") == '-1' ? true : false) === true ? Util.config.JSfile + path[i] : path[i];
		head.appendChild(script)
	}
	if ('function' == typeof callback) {
		document.addEventListener ? script.addEventListener("load", function () {
			callback();
			script.onload = null;
			script.parentNode.removeChild(script)
		}, false) : script.onreadystatechange = function () {
			if (/loaded|complete/.test(script.readyState)) {
				callback();
				script.onreadystatechange = null
			}
		}
	}
	if (ecall) {
		script.onerror = function () {
			script = null;
			if ('function' == typeof ecall) ecall()
		}
	}
};

/*!
 * Init 
 */
$(function() {
	$('[data-url]').on('click',function(){
		var self = $(this);
		if(self.attr('data-url') != ''){
			window.location.href = self.data('url');
		}
	});
});